<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

    <insert id="insertUser" parameterType="User">
            INSERT INTO User
                    (user_id,
                    password,
                    email,
                    name,
                    register_date,
                    phone,
                    address,
                    company)
                    VALUES
                    (
                    #{userId},
                    #{password},
                    #{email},
                    #{name},
                    now(),
                    #{phone, jdbcType=NVARCHAR},
                    #{address, jdbcType=NVARCHAR},
                    #{company, jdbcType=NVARCHAR}
                    )
    </insert>

    <delete id="deleteUser" parameterType="Integer">
        DELETE FROM User WHERE user_code = #{param1}
    </delete>

    <select id="isUserIdCount" resultType="Integer" parameterType="String">
            SELECT count(*)
              FROM User
             where user_id = #{param1}
    </select>

    <select id="getUser" resultType="User" parameterType="User">
            SELECT user_code,
                   user_id,
                   password,
                   email,
                   name,
                   register_date,
                   phone,
                   address,
                   company
             FROM User
            WHERE 1=1
        <if test="userCode != null and userCode != ''">
              and user_code = #{userCode}
        </if>
        <if test="userId != null and userId != ''">
              and user_id = #{userId}
        </if>
    </select>


    <update id="updateUser" parameterType="User">
        UPDATE User
           SET password = #{password},
               email = #{email},
               name = #{name},
               phone = #{phone},
               address = #{address},
               company = #{company},
         WHERE user_code = #{userId}
    </update>

    <select id="findTokenByUser" parameterType="String" resultType="User">
        SELECT user_id,
               user_code,
               email,
               name,
               register_date,
               phone,
               address,
               company,
               #{param1} as token
         FROM User
        where user_code = (select user_code
                           from Token
                          where token_id = #{param1})
    </select>

    <select id="findUsers" resultType="User">
        SELECT distinct a.user_code,
                a.user_id,
                a.email,
                a.name,
                a.register_date,
                a.phone,
                a.address,
                a.company
        FROM User a
        left join UserClientScope b on a.user_code = b.user_code
        where 1=1
        and a.user_id != 'admin'
        and (b.client_id in (select aa.client_id
                            from UserClientScope aa
                            join Token bb on aa.user_code = bb.user_code
                            where bb.token_id= #{adminToken}
                            and aa.scope_id = 'Admin'
                            and aa.client_id != 'gauth')
        or exists (select 1
                    from Token aaa
                    where aaa.token_id = #{adminToken}
                    and aaa.user_id = 'admin'))
        <if test="search != null and search != ''">
            and (a.user_id = #{search}
            or a.user_code = #{search}
            or a.email = #{search}
            or a.company = #{search}
            or a.name = #{search})
        </if>
        limit ${p}, 20
    </select>

    <insert id="insertPendUser" parameterType="PendingUserResponse">
        insert into Pending (email, activate_key, status, expire_date, client_id)
        values( #{email}, #{activateKey}, #{status}, #{expireDate},#{clientId} )
    </insert>

    <select id="findPendUser" resultType="PendingUserResponse">
        select email
              , status
              , activate_key
              , expire_date
              , client_id
          from Pending
          where activate_key = #{param1}
    </select>

    <select id="findPendUserByEmail" parameterType="String" resultType="PendingUserResponse">
        select email
        , status
        , activate_key
        , expire_date
        , client_id
        from Pending
        where email = #{param1}
        order by expire_date desc
        limit 1
    </select>

    <delete id="deleteEmailByPendUser" parameterType="String">
        DELETE FROM Pending
          WHERE email = #{param1}
    </delete>

    <delete id="deletePendUserByActivateKey" parameterType="String">
        DELETE FROM Pending
        WHERE activate_key = #{param1}
    </delete>

    <update id="updateStatusByPendUser" parameterType="PendingUserResponse">
        update Pending
            set status = #{status}
          where activate_key = #{activateKey}
    </update>

    <select id="isEmail" parameterType="String" resultType="Integer">
        select (select count(*)
                  from User
                 where email = #{param1})
             + (select count(*)
                  from Pending
                 where email = #{param1}
                   and expire_date >= now()) as count
    </select>

    <select id="findCountByUsers" resultType="Integer">
        select count(distinct 1)
          from User a
        left join UserClientScope b on a.user_code = b.user_code
        where 1=1
        and a.user_id != 'admin'
        and (b.client_id in (select aa.client_id
                            from UserClientScope aa
                            join Token bb on aa.user_code = bb.user_code
                            where bb.token_id= #{adminToken}
                            and aa.scope_id = 'Admin'
                            and aa.client_id != 'gauth')
        or exists (select 1
                    from Token aaa
                    where aaa.token_id = #{adminToken}
                    and aaa.user_id = 'admin'))
        <if test="search != null and search != ''">
            and (a.user_id = #{search}
            or a.user_code = #{search}
            or a.email = #{search}
            or a.company = #{search}
            or a.name = #{search})
        </if>
    </select>

    <select id="selectPendUsers" parameterType="Token" resultType="PendingUserResponse">
        select email
              , activate_key
              , status
              , expire_date
              , client_id
        from Pending
        where (client_id in (select aa.client_id
                                from UserClientScope aa
                                join Token bb on aa.user_code = bb.user_code
                                where bb.token_id= #{tokenId}
                                and aa.scope_id = 'Admin'
                                and aa.client_id != 'gauth')
        or exists (select 1
        from Token aaa
        where aaa.token_id = #{tokenId}
        and aaa.user_id = 'admin'))
        order by expire_date
    </select>
    
    <delete id="deleteAllPendUser">
        delete from Pending
    </delete>

</mapper>
